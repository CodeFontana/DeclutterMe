@page "/Admin/Category"
@inject DeclutterMeDbContext Db

<PageTitle>Categories - DeclutterMe</PageTitle>

<Notification @ref="_notification" />

@if (_createMode)
{
    <EditForm Model="_category" OnValidSubmit="HandleCreateCategory">
        <div class="border p-3 mt-4">
            <div class="row pb-2">
                <h2 class="text-body">Create Category</h2>
                <hr />
            </div>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Name:</label>
                <InputText class="form-control" @bind-Value="_category.Name" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => _category.Name)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Display Order:</label>
                <InputNumber class="form-control" @bind-Value="_category.DisplayOrder" />
                <div class="text-danger">
                    <ValidationMessage class="text-danger" For="@(() => _category.DisplayOrder)" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary me-2">Create</button>
            <button type="button" class="btn btn-secondary" @onclick="() => { CreateMode = false; }">Back to List</button>
        </div>
    </EditForm>
}
else if (_editMode)
{
    <EditForm Model="_category" OnValidSubmit="HandleEditCategory">
        <div class="border p-3 mt-4">
            <div class="row pb-2">
                <h2 class="text-body">Edit Category</h2>
                <hr />
            </div>
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Name:</label>
                <InputText class="form-control" @bind-Value="_category.Name" />
                <div class="text-danger">
                    <ValidationMessage For="@(() => _category.Name)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Display Order:</label>
                <InputNumber class="form-control" @bind-Value="_category.DisplayOrder" />
                <div class="text-danger">
                    <ValidationMessage class="text-danger" For="@(() => _category.DisplayOrder)" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary me-2">Update</button>
            <button type="button" class="btn btn-secondary" @onclick="() => { EditMode = false; }">Back to List</button>
        </div>
    </EditForm>
}
else if (_deleteMode)
{
    <EditForm Model="_category" OnValidSubmit="HandleDeleteCategory">
        <div class="border p-3 mt-4">
            <div class="row pb-2">
                <h2 class="text-body">Delete Category</h2>
                <hr />
            </div>
            <div class="mb-3">
                <label>Name:</label>
                <InputText class="form-control" @bind-Value="_category.Name" disabled />
            </div>
            <div class="mb-3">
                <label>Display Order:</label>
                <InputNumber class="form-control" @bind-Value="_category.DisplayOrder" disabled />
            </div>
            <button type="submit" class="btn btn-danger me-2">Delete</button>
            <button type="button" class="btn btn-secondary" @onclick="() => { DeleteMode = false; }">Back to List</button>
        </div>
    </EditForm>
}
else
{
    <div class="container p-3">

        <div class="row py-4">
            <div class="col-6">
                <h2 class="text-body">Category List</h2>
            </div>
            <div class="col-6 text-end">
                <button class="btn btn-primary" @onclick="() => { CreateMode = true; }">
                    <i class="bi bi-plus-circle me-2"></i>Create New Category
                </button>
            </div>
        </div>

        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Display Order</th>
                    <th>Created</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (_categories is not null)
                {
                    @foreach (var item in _categories)
                    {
                        <tr>
                            <td class="align-middle">@item.Name</td>
                            <td class="align-middle">@item.DisplayOrder</td>
                            <td class="align-middle">@item.Created</td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => {_category = item; EditMode = true;}">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => {_category = item; DeleteMode = true;}">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    </div>
}

@code {
    private IEnumerable<DataAccessLibrary.Entities.Category> _categories = default!;
    private DataAccessLibrary.Entities.Category _category = new();
    private Notification _notification = default!;

    private bool _createMode = false;
    public bool CreateMode
    {
        get { return _createMode; }
        set
        {
            if (value)
            {
                _category = new();
                EditMode = false;
                DeleteMode = false;
            }

            _notification.ResetAlert();
            _createMode = value;
        }
    }

    private bool _editMode = false;
    public bool EditMode
    {
        get { return _editMode; }
        set
        {
            if (value)
            {
                CreateMode = false;
                DeleteMode = false;
            }

            _notification.ResetAlert();
            _editMode = value;
        }
    }

    private bool _deleteMode = false;
    public bool DeleteMode
    {
        get { return _deleteMode; }
        set
        {
            if (value)
            {
                CreateMode = false;
                EditMode = false;
            }

            _notification.ResetAlert();
            _deleteMode = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        _categories = await Db.Categories.ToListAsync();
    }

    private async Task HandleCreateCategory()
    {
        if (_category.Name == _category.DisplayOrder.ToString())
        {
            _notification.AlertError("The DisplayOrder cannot match the Name");
            return;
        }

        await Db.Categories.AddAsync(_category);
        await Db.SaveChangesAsync();
        _category = new();
        _notification.AlertSuccess("Category created successfully");
        _createMode = false;
        await LoadCategories();
    }

    private async Task HandleEditCategory()
    {
        if (_category.Name == _category.DisplayOrder.ToString())
        {
            _notification.AlertError("The DisplayOrder cannot match the Name");
            return;
        }

        await Db.SaveChangesAsync();
        _category = new();
        _notification.AlertInfo("Category updated successfully");
        _editMode = false;
        await LoadCategories();
    }

    private async Task HandleDeleteCategory()
    {
        Db.Categories.Remove(_category);
        await Db.SaveChangesAsync();
        _category = new();
        _notification.AlertSuccess("Category deleted successfully");
        _deleteMode = false;
        await LoadCategories();
    }
}