@page "/Admin/Product/Create"
@using System.Net
@inject DeclutterMeDbContext Db
@inject IWebHostEnvironment HostEnvironment
@inject NavigationManager NavMan

<PageTitle>Create Product - DeclutterMe</PageTitle>

<div class="container p-3">
    @if (_categories == null)
    {
        <Spinner />
    }
    else
    {
        <EditForm Enhance Model="Product" FormName="createProduct" OnValidSubmit="HandleCreateProduct" method="post" enctype="multipart/form-data">
            <div class="row">
                <div class="col-12">
                    <div class="border p-3 mt-4 row">
                        <div class="col-12 pb-2">
                            <h2 class="text-body">Create Product</h2>
                            <hr />
                        </div>
                        <DataAnnotationsValidator />
                        <BSInputText Class="mb-3" Id="productName" Label="Name" @bind-Value="Product!.Name" />
                        <BSInputTextArea Class="mb-3" Id="productDescription" @bind-Value="Product.Description" Rows="3" />
                        <BSInputNumber Class="mb-3 col-6" Id="listPrice" Label="List Price" @bind-Value="Product.ListPrice" />
                        <BSInputNumber Class="mb-3 col-6" Id="actualPrice" Label="Actual Price" @bind-Value="Product.ActualPrice" />

                        <div class="mb-3">
                            <label>Image Url:</label>
                            <InputFile class="form-control" name="Product.ImageFile" />
                        </div>

                        <BSInputSelect Class="mb-3" Id="selectCategory" Label="Category" @bind-Value="Product.CategoryId">
                            <option value="">Select Category...</option>
                            @foreach (var c in _categories)
                            {
                                <option value=@($"{c.Id}")>@c.Name</option>
                            }
                        </BSInputSelect>

                        <div class="col-12">
                            <button type="submit" class="btn btn-primary me-2">Create</button>
                            <a class="btn btn-secondary" href="Admin/Product">Back to List</a>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromForm(FormName = "createProduct")]
    internal DataAccessLibrary.Entities.Product Product { get; set; } = default!;

    private IEnumerable<DataAccessLibrary.Entities.Category> _categories = default!;

    protected override async Task OnInitializedAsync()
    {
        _categories = await Db.Categories.ToListAsync();
        Product ??= new();
    }

    private async Task HandleCreateProduct()
    {
        string path = Path.Combine(HostEnvironment.WebRootPath, @"img/products");

        if (Product!.ImageFile != null)
        {
            string safeFileName = WebUtility.HtmlEncode(Product.ImageFile.FileName);
            await using FileStream fs = new(Path.Combine(path, safeFileName), FileMode.Create);
            await Product.ImageFile.CopyToAsync(fs);
        }

        DataAccessLibrary.Entities.Product product = new()
        {
            Name = Product.Name,
            Description = Product.Description,
            ListPrice = Product.ListPrice,
            ActualPrice = Product.ActualPrice,
            ImageUrl = Product.ImageFile != null ? $"img/products/{Product.ImageFile.FileName}" : "",
            CategoryId = Product.CategoryId
        };

        await Db.Products.AddAsync(product);
        await Db.SaveChangesAsync();
        NavMan.NavigateTo("Admin/Product");
    }
}